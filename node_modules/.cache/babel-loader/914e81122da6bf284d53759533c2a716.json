{"ast":null,"code":"import _slicedToArray from \"/Users/ghofranebenhmaid/Desktop/ghofrane.dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ghofranebenhmaid/Desktop/ghofrane.dev/src/components/NavHamburger/Navbar.component.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport Hamburger from './Hamburger';\nimport './Header.style.scss';\nimport { HiMenuAlt3, HiOutlineX } from \"react-icons/hi\";\nimport { gsap } from 'gsap';\nimport { staggerReveal, handleHover, handleHoverExit, staggerRevealClose } from './Animations';\n\nconst Navbar = ({\n  history,\n  state2\n}) => {\n  let reveal1 = useRef(null);\n  let reveal2 = useRef(null);\n  useEffect(() => {\n    // If the menu is open and we click the menu button to close it.\n    if (state2.clicked === false) {\n      // If menu is closed and we want to open it.\n      staggerRevealClose(reveal2, reveal1);\n    } else if (state2.clicked === true || state2.clicked === true && state2.initial === null) {\n      //Allow menu to have height of 100%\n      gsap.to([reveal1, reveal2], {\n        duration: 0,\n        opacity: 1,\n        height: '100%' // width: '100%',\n\n      });\n      staggerReveal(reveal1, reveal2); // fadeInUp(info);\n      // staggerText(line1, line2, line3, line4, line5);\n    }\n  }, [state2]); // State of our Menu\n\n  const _useState = useState({\n    initial: false,\n    clicked: null,\n    menuName: React.createElement(HiMenuAlt3, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        st = _useState2[0],\n        setState = _useState2[1]; // State of our button\n\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        disabled = _useState4[0],\n        setDisabled = _useState4[1]; //Use Effect\n\n\n  useEffect(() => {\n    //Listening for page changes.\n    history.listen(() => {\n      setState({\n        clicked: false,\n        menuName: React.createElement(HiMenuAlt3, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        })\n      });\n    });\n  }, [history]); // Toggle menu\n\n  const handleMenu = () => {\n    disableMenu();\n\n    if (st.initial === false) {\n      setState({\n        initial: null,\n        clicked: true,\n        menuName: React.createElement(HiOutlineX, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        })\n      });\n    } else if (st.clicked === true) {\n      setState({\n        clicked: !st.clicked,\n        menuName: React.createElement(HiMenuAlt3, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        })\n      });\n    } else if (st.clicked === false) {\n      setState({\n        clicked: !st.clicked,\n        menuName: React.createElement(HiOutlineX, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        })\n      });\n    }\n  }; //Determine if out menu button should be disabled\n\n\n  const disableMenu = () => {\n    setDisabled(!disabled);\n    setTimeout(() => {\n      setDisabled(false);\n    }, 1200);\n  };\n\n  return React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"inner-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    ref: el => reveal1 = el,\n    className: \"menu-secondary-background-color\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"logo\",\n    ref: el => reveal2 = el,\n    onMouseEnter: e => handleHover(e),\n    onMouseOut: e => handleHoverExit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"GHOFRANE.\")), React.createElement(\"div\", {\n    className: \"menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"menu--btn\",\n    disabled: disabled,\n    onClick: handleMenu,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, st.menuName))))), React.createElement(Hamburger, {\n    st: st,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }));\n};\n\nexport default withRouter(Navbar);","map":{"version":3,"sources":["/Users/ghofranebenhmaid/Desktop/ghofrane.dev/src/components/NavHamburger/Navbar.component.js"],"names":["React","useState","useRef","useEffect","withRouter","Link","Hamburger","HiMenuAlt3","HiOutlineX","gsap","staggerReveal","handleHover","handleHoverExit","staggerRevealClose","Navbar","history","state2","reveal1","reveal2","clicked","initial","to","duration","opacity","height","menuName","st","setState","disabled","setDisabled","listen","handleMenu","disableMenu","setTimeout","el","e"],"mappings":"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","sourcesContent":["import React, { useState,useRef, useEffect } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport Hamburger from './Hamburger';\nimport './Header.style.scss';\nimport { HiMenuAlt3, HiOutlineX } from \"react-icons/hi\";\n\nimport { gsap } from 'gsap';\n\nimport {\n\n   staggerReveal,\n   handleHover,\n   handleHoverExit,\n   staggerRevealClose,\n} from './Animations';\n\nconst Navbar = ({ history,state2 }) =>\n{\n\n   let reveal1 = useRef(null);\n   let reveal2 = useRef(null);\n   \n   useEffect(() => {\n      // If the menu is open and we click the menu button to close it.\n      if (state2.clicked === false) {\n         // If menu is closed and we want to open it.\n\n         staggerRevealClose(reveal2, reveal1);\n         \n      } else if (\n         state2.clicked === true ||\n         (state2.clicked === true && state2.initial === null)\n      ) {\n        \n         //Allow menu to have height of 100%\n         gsap.to([reveal1, reveal2], {\n            duration: 0,\n            opacity: 1,\n            height: '100%',\n            // width: '100%',\n         });\n         staggerReveal(reveal1, reveal2);\n         // fadeInUp(info);\n         // staggerText(line1, line2, line3, line4, line5);\n      }\n   }, [state2]);\n\n\n\n\n\n   // State of our Menu\n   const [st, setState] = useState({\n      initial: false,\n      clicked: null,\n      menuName: <HiMenuAlt3 /> ,\n   });\n   // State of our button\n   const [disabled, setDisabled] = useState(false);\n\n   //Use Effect\n   useEffect(() => {\n      //Listening for page changes.\n      history.listen(() => {\n         setState({ clicked: false, menuName: <HiMenuAlt3 />  });\n      });\n   }, [history]);\n\n   // Toggle menu\n   const handleMenu = () => {\n      disableMenu();\n      if (st.initial === false) {\n         setState({\n            initial: null,\n            clicked: true,\n            menuName: <HiOutlineX/>,\n         });\n      } else if (st.clicked === true) {\n         setState({\n            clicked: !st.clicked,\n            menuName: <HiMenuAlt3/> ,\n         });\n      } else if (st.clicked === false) {\n         setState({\n            clicked: !st.clicked,\n            menuName: <HiOutlineX/>,\n         });\n      }\n   };\n\n   //Determine if out menu button should be disabled\n   const disableMenu = () => {\n      setDisabled(!disabled);\n      setTimeout(() => {\n         setDisabled(false);\n      }, 1200);\n   };\n\n   return (\n      <header>\n         <div className='container'>\n            <div className='wrapper'>\n               <div className='inner-header'>\n                  <div\n            ref={(el) => (reveal1 = el)}\n            className='menu-secondary-background-color'\n         ></div>\n                  <div className='logo'\n                     ref={ (el) => (reveal2 = el) }\n                     onMouseEnter={(e) => handleHover(e)}\n                                 onMouseOut={(e) => handleHoverExit(e)}\n                  >\n                     <Link to='/'>GHOFRANE.</Link>\n                  </div>\n\n                  <div className='menu'>\n\n                     <button\n                        className='menu--btn'\n                        disabled={disabled}\n                        onClick={handleMenu}\n                     >\n                        {st.menuName}\n                     </button>\n                  </div>\n               </div>\n            </div>\n         </div>\n         <Hamburger st={st} />\n      </header>\n   );\n};\n\nexport default withRouter(Navbar);\n"]},"metadata":{},"sourceType":"module"}